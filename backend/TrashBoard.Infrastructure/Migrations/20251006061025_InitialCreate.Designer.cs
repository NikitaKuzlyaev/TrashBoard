// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrashBoard.Infrastructure.Persistence;

#nullable disable

namespace TrashBoard.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251006061025_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrashBoard.Domain.Entities.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ThreadId")
                        .HasColumnType("integer");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.ToTable("boards", (string)null);
                });

            modelBuilder.Entity("TrashBoard.Domain.Entities.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("pages", (string)null);
                });

            modelBuilder.Entity("TrashBoard.Domain.Entities.Thread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("Id");

                    b.ToTable("threads", (string)null);
                });

            modelBuilder.Entity("TrashBoard.Domain.Entities.Board", b =>
                {
                    b.HasOne("TrashBoard.Domain.Entities.Thread", null)
                        .WithMany("Boards")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrashBoard.Domain.Entities.Page", b =>
                {
                    b.HasOne("TrashBoard.Domain.Entities.Board", null)
                        .WithMany("Pages")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrashBoard.Domain.Entities.Board", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("TrashBoard.Domain.Entities.Thread", b =>
                {
                    b.Navigation("Boards");
                });
#pragma warning restore 612, 618
        }
    }
}
